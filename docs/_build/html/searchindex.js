Search.setIndex({"docnames": ["index", "source/LECA", "source/generated/LECA.analyze.comparative_datasize_performance", "source/generated/LECA.analyze.create_input", "source/generated/LECA.analyze.datasize_performance", "source/generated/LECA.analyze.extract_results", "source/generated/LECA.analyze.performance_plot", "source/generated/LECA.analyze.plot_1D", "source/generated/LECA.analyze.plot_1D_Sx", "source/generated/LECA.analyze.plot_2D", "source/generated/LECA.analyze.plot_2D_Sx", "source/generated/LECA.analyze.predict_arrhenius_fit", "source/generated/LECA.analyze.predict_conductivity_from_arrhenius_objectives", "source/generated/LECA.analyze.predict_conductivity_from_log_conductivity_objective", "source/generated/LECA.analyze.visualize_arrhenius_fit", "source/generated/LECA.estimators.AlphaGPR", "source/generated/LECA.estimators.PolynomialRegression", "source/generated/LECA.fit.WorkFlow", "source/generated/LECA.prep.arrhenius", "source/generated/LECA.prep.combine_cut", "source/generated/LECA.prep.data_visualize", "source/generated/LECA.prep.direct_sample_arrhenius", "source/generated/LECA.prep.feature_overview", "source/generated/LECA.prep.filter_fn", "source/generated/LECA.prep.import_data", "source/generated/LECA.prep.interactive_data_visualize", "source/generated/LECA.prep.outlier_filter", "source/synthetic_introduction"], "filenames": ["index.rst", "source\\LECA.rst", "source\\generated\\LECA.analyze.comparative_datasize_performance.rst", "source\\generated\\LECA.analyze.create_input.rst", "source\\generated\\LECA.analyze.datasize_performance.rst", "source\\generated\\LECA.analyze.extract_results.rst", "source\\generated\\LECA.analyze.performance_plot.rst", "source\\generated\\LECA.analyze.plot_1D.rst", "source\\generated\\LECA.analyze.plot_1D_Sx.rst", "source\\generated\\LECA.analyze.plot_2D.rst", "source\\generated\\LECA.analyze.plot_2D_Sx.rst", "source\\generated\\LECA.analyze.predict_arrhenius_fit.rst", "source\\generated\\LECA.analyze.predict_conductivity_from_arrhenius_objectives.rst", "source\\generated\\LECA.analyze.predict_conductivity_from_log_conductivity_objective.rst", "source\\generated\\LECA.analyze.visualize_arrhenius_fit.rst", "source\\generated\\LECA.estimators.AlphaGPR.rst", "source\\generated\\LECA.estimators.PolynomialRegression.rst", "source\\generated\\LECA.fit.WorkFlow.rst", "source\\generated\\LECA.prep.arrhenius.rst", "source\\generated\\LECA.prep.combine_cut.rst", "source\\generated\\LECA.prep.data_visualize.rst", "source\\generated\\LECA.prep.direct_sample_arrhenius.rst", "source\\generated\\LECA.prep.feature_overview.rst", "source\\generated\\LECA.prep.filter_fn.rst", "source\\generated\\LECA.prep.import_data.rst", "source\\generated\\LECA.prep.interactive_data_visualize.rst", "source\\generated\\LECA.prep.outlier_filter.rst", "source\\synthetic_introduction.ipynb"], "titles": ["LECA - The Liquid Electrolyte Composition Analysis Package", "LECA API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.comparative_datasize_performance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.create_input", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.datasize_performance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.extract_results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.performance_plot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.plot_1D", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.plot_1D_Sx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.plot_2D", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.plot_2D_Sx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.predict_arrhenius_fit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.predict_conductivity_from_arrhenius_objectives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.predict_conductivity_from_log_conductivity_objective", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.analyze</span></code>.visualize_arrhenius_fit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.estimators</span></code>.AlphaGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.estimators</span></code>.PolynomialRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.fit</span></code>.WorkFlow", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.arrhenius", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.combine_cut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.data_visualize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.direct_sample_arrhenius", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.feature_overview", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.filter_fn", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.import_data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.interactive_data_visualize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">LECA.prep</span></code>.outlier_filter", "Synthetic 1D LECA Introduction"], "terms": {"creat": [0, 3, 17], "simplifi": 0, "jupyt": 0, "notebook": [0, 24, 25, 27], "1": [0, 2, 3, 4, 7, 8, 9, 10, 12, 17, 18, 21, 26, 27], "base": [0, 15, 16, 17, 18, 21], "workflow": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13], "appli": [0, 17, 18, 21, 23], "scikit": [0, 15, 17], "learn": [0, 15, 17], "2": [0, 2, 4, 7, 9, 10, 12, 15, 17, 18, 21, 27], "machin": 0, "predict": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 27], "behavior": 0, "python": [0, 17], "3": [0, 12, 17, 27], "7": [0, 27], "6": [0, 22, 27], "4": [0, 17, 18, 21, 22, 25, 27], "11": 0, "With": 0, "follow": [0, 7, 8, 9, 10, 12, 13, 17, 22, 24], "librari": [0, 17], "numpi": [0, 2, 4, 18, 21, 27], "22": 0, "matplotlib": [0, 9, 10, 22, 25, 27], "5": [0, 2, 4, 17, 18, 19, 21, 26, 27], "panda": [0, 11, 24, 27], "scipi": 0, "8": [0, 7], "uncertainti": [0, 7, 8, 12, 13, 17, 18, 21, 27], "mapi": [0, 17], "0": [0, 2, 4, 7, 8, 12, 14, 15, 17, 18, 21, 26, 27], "hdbscan": [0, 26], "28": 0, "seaborn": 0, "gpyopt": [0, 17], "depend": [0, 7, 9, 10, 17], "can": [0, 7, 8, 9, 10, 14, 17, 18, 21, 27], "from": [0, 2, 3, 4, 7, 11, 12, 14, 16, 17, 18, 21, 23, 24, 25, 26, 27], "directori": [0, 24], "pip": 0, "r": [0, 27], "txt": 0, "miniconda": 0, "method": [0, 17], "i": [0, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 21, 22, 23, 26, 27], "known": 0, "run": [0, 17, 25], "command": [0, 27], "conda": 0, "n": [0, 17, 19], "env": 0, "activ": [0, 17], "thi": [0, 7, 8, 9, 10, 12, 13, 17, 18, 21, 26, 27], "simpli": 0, "modul": 0, "prep": [0, 7, 8, 9, 12, 17, 27], "fit": [0, 7, 8, 9, 11, 14, 15, 16, 18, 21, 26, 27], "json": [0, 24], "csv": [0, 24], "file": [0, 24], "visual": [0, 14, 20, 25], "dataset": [0, 2, 4, 17, 18, 20, 21, 25, 26, 27], "overview": [0, 17, 18, 21], "interact": [0, 25], "identifi": [0, 17], "filter": [0, 23, 26], "outlier": [0, 26], "valu": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26], "us": [0, 2, 4, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26], "manual": [0, 27], "nonsens": 0, "user": [0, 17, 18, 21], "defin": [0, 2, 4, 7, 8, 15, 17, 18, 21, 25, 26], "explicit": [0, 2, 3, 4, 7, 8, 9, 10, 17], "boundari": [0, 7, 8, 9, 10, 17], "combin": [0, 17, 18, 19, 27], "repeat": [0, 2, 4, 17, 18, 19, 21, 27], "measur": [0, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "record": [0, 2, 4, 17, 19], "statist": [0, 27], "nois": [0, 17, 27], "gener": [0, 3, 6, 7, 8, 9, 10, 13, 17, 18, 21, 27], "surrog": [0, 7, 9, 12, 17, 18, 21], "arrheniu": [0, 7, 8, 9, 10, 11, 12, 14, 17, 21], "other": [0, 7, 9, 10, 17, 27], "split": [0, 17], "scale": [0, 2, 4, 17, 18, 21], "automat": [0, 2, 4, 6, 17, 18, 21], "handl": 0, "declar": [0, 2, 4, 9, 10, 16, 17, 19], "implement": [0, 17], "support": [0, 17, 18, 21, 25], "dimension": [0, 7, 8, 9, 10], "space": [0, 17], "linear": [0, 16, 17], "lr": 0, "gaussian": 0, "process": [0, 17, 18, 21, 24], "gpr": [0, 15, 17, 27], "isotrop": [0, 17], "anisotrop": [0, 17], "rbf": [0, 17], "matern": [0, 17], "rq": 0, "custom": [0, 14, 17], "kernel": [0, 15, 17], "neural": [0, 17], "network": [0, 17], "nn": [0, 17], "random": [0, 2, 4, 17, 18, 19, 21, 27], "forest": [0, 17], "rf": [0, 17], "hyperparamet": [0, 17, 22], "optim": [0, 15, 17, 27], "polynomi": [0, 16, 17, 27], "select": [0, 2, 4, 12, 16, 17, 20, 21, 23, 25], "cross": [0, 17], "valid": [0, 17, 27], "score": [0, 2, 4, 6, 17, 26, 27], "provid": [0, 2, 3, 4, 12, 14, 17, 18, 21, 23], "simpl": 0, "perform": [0, 2, 4, 6, 17, 27], "ensembl": [0, 22], "estim": [0, 2, 4, 7, 8, 17, 18, 21], "unseen": [0, 17, 27], "widget": [0, 25], "variou": 0, "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "maxim": [0, 17, 27], "minim": [0, 17, 18, 21], "rank": [0, 17], "batch": [0, 17], "mode": [0, 17, 24], "rbmal": [0, 17, 27], "approach": [0, 17], "cordoso": 0, "et": [0, 17], "al": [0, 17], "multi": 0, "pareto": 0, "front": 0, "multipl": [0, 17], "e": [0, 2, 4, 7, 8, 12, 17, 18, 19, 21, 26], "g": [0, 7, 8, 17, 18, 21, 27], "electrochem": 0, "stabil": 0, "conduct": [0, 7, 8, 9, 10, 12, 13, 14, 17, 18, 21], "etc": [0, 18, 21], "9": 0, "brian": 0, "granger": 0, "fernando": 0, "p\u00e9rez": 0, "think": 0, "storytel": 0, "code": 0, "In": [0, 17, 18, 21], "comput": 0, "scienc": [0, 17], "23": 0, "2021": 0, "pp": 0, "14": 0, "doi": 0, "10": [0, 3, 7, 9, 12, 13, 15, 17, 18, 21, 27], "1109": 0, "mcse": 0, "3059263": 0, "pedregosa": 0, "journal": 0, "research": 0, "12": 0, "2011": 0, "2825": 0, "2830": 0, "leland": 0, "mcinn": 0, "john": 0, "heali": 0, "steve": 0, "astel": 0, "hierarch": 0, "densiti": 0, "cluster": [0, 26], "open": 0, "sourc": 0, "softwar": 0, "2017": 0, "p": 0, "205": 0, "author": 0, "A": [0, 5, 6, 7, 9, 17], "bayesian": [0, 17], "framework": 0, "2016": 0, "url": 0, "http": [0, 17], "github": [0, 17], "com": [0, 17], "sheffieldml": 0, "anand": 0, "narayanan": 0, "krishnamoorthi": 0, "driven": 0, "high": 0, "throughput": 0, "experi": 0, "batteri": 0, "formul": [0, 18, 21, 25], "unravel": 0, "impact": 0, "chemistri": 0, "2022": 0, "e202200008": 0, "org": 0, "1002": 0, "cmtd": 0, "202200008": 0, "agnost": 0, "interv": [0, 7, 8, 18, 21], "version": 0, "readthedoc": 0, "io": 0, "en": 0, "latest": 0, "index": [0, 14, 17], "html": 0, "visit": 0, "08": 0, "24": 0, "thiago": 0, "c": [0, 16, 27], "cardoso": [0, 17], "inform": [0, 17, 18, 21, 24], "379": 0, "313": 0, "337": 0, "1016": 0, "j": 0, "ins": 0, "037": 0, "project": 0, "ha": [0, 2, 4, 17, 18, 21], "receiv": 0, "fund": 0, "european": 0, "union": [0, 2, 3, 4, 7, 8, 9, 10, 12, 14, 16, 17, 18, 19, 21, 22, 23, 26], "": [0, 2, 7, 8, 9, 10, 17, 23, 27], "horizon": 0, "2020": 0, "innov": 0, "program": 0, "under": [0, 17, 26], "grant": 0, "agreement": 0, "No": [0, 27], "957189": 0, "big": [0, 24], "map": [0, 24], "957213": 0, "battery2030": 0, "wf": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 27], "option": [2, 3, 4, 6, 7, 8, 14, 16, 17, 18, 21, 24, 25], "str": [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "list": [2, 3, 4, 7, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "none": [2, 4, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 25, 27], "objective_func": [2, 4, 17, 19, 22, 26], "test_siz": [2, 4], "int": [2, 3, 4, 7, 8, 9, 10, 14, 16, 17, 18, 19, 21, 22, 26, 27], "float": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 17, 18, 21, 26], "n_min": [2, 4], "sample_count": [2, 4], "100": [2, 4, 17, 18, 21, 26, 27], "log_scal": 2, "bool": [2, 4, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 21, 22, 23, 24, 26], "fals": [2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 26, 27], "plot": [2, 4, 6, 7, 8, 9, 10, 14, 17, 18, 20, 21, 22, 25, 26], "y_lim": 2, "tupl": [2, 3, 4, 7, 8, 11, 17, 18, 21, 22, 23], "random_st": [2, 4, 15, 17, 18, 21, 27], "confid": [2, 4, 7, 8, 17], "save_loc": [2, 4, 7, 8, 9, 10, 14, 17, 18, 21, 22], "dict": [2, 3, 4, 7, 8, 9, 10, 17], "datafram": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "compar": [2, 17], "model": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 27], "function": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27], "n_train": [2, 4], "size": [2, 4, 22], "The": [2, 3, 4, 6, 7, 8, 9, 17, 18, 19, 21, 23, 26], "mse": [2, 4, 6, 17, 27], "name": [2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 17, 18, 21, 22, 26, 27], "regress": [2, 4, 17], "ar": [2, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 17, 18, 21, 23], "calcul": [2, 4, 17, 19], "given": [2, 3, 4, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 21, 23, 27], "object": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27], "randomli": [2, 4, 18, 21], "datapoint": [2, 4, 17, 18, 26, 27], "fix": [2, 4, 7, 8, 17], "fraction": [2, 4, 17], "number": [2, 3, 4, 7, 8, 9, 10, 17, 18, 19, 21], "train": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 27], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "string": [2, 4, 7, 8, 9, 10, 12, 13, 14, 17, 24], "datas": [2, 4], "analysi": [2, 4], "all": [2, 3, 4, 5, 6, 9, 10, 14, 16, 17, 18, 20, 21, 24, 25, 26], "default": [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26], "which": [2, 4, 5, 7, 8, 9, 10, 15, 16, 17, 18, 21, 23, 25, 26], "when": [2, 4, 17], "pass": [2, 4, 7, 8, 9, 10, 12, 15, 16, 17, 25], "If": [2, 3, 4, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 21, 23, 24], "test": [2, 4, 6, 17, 27], "set": [2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 17, 18, 19, 21, 27], "whole": [2, 4, 18, 21], "first": [2, 4, 15, 19, 23], "smallest": [2, 4], "sampl": [2, 4, 16, 17, 19, 27], "non": [2, 4, 17], "zero": [2, 4], "e_train": [2, 4], "result": [2, 4, 5, 7, 8, 14, 17, 18, 19, 21, 26, 27], "point": [2, 4, 9, 10, 11, 17, 20, 25, 26], "error": [2, 4, 15, 17, 18, 21, 27], "differ": [2, 4, 7, 8, 14, 17, 18, 21], "equidist": [2, 4, 17], "rang": [2, 4, 7, 8, 9, 10, 17, 20, 25, 26, 27], "n_total": [2, 4], "how": [2, 4, 18, 21, 27], "mani": [2, 4, 17, 18, 21, 27], "time": [2, 4, 5, 6, 17, 18, 21, 27], "mean": [2, 4, 14, 17, 18, 19, 21], "standard": [2, 4, 7, 8, 11, 14, 15, 17, 18, 19, 21, 24], "deviat": [2, 4, 7, 8, 11, 14, 15, 17, 18, 19, 21], "whether": [2, 4, 7, 8, 9, 10, 14, 17, 24, 26], "y": [2, 7, 8, 14, 15, 16, 17, 25, 27], "axi": [2, 3, 7, 8, 14, 27], "log": [2, 7, 8, 9, 10, 12, 13, 14, 17, 18, 21], "output": [2, 4, 17, 22, 24, 27], "seed": [2, 4, 18, 21], "reproduc": [2, 4, 17, 18, 21, 27], "interval": 2, "bar": 2, "shown": [2, 17, 18, 21, 22, 25], "destin": [2, 4, 14], "save": [2, 4, 7, 8, 9, 10, 14, 17, 18, 21, 22, 24], "argument": [2, 4, 7, 8, 9, 10, 14, 15, 16, 23], "figur": [2, 4, 14, 25, 27], "model_compare_n_data": 2, "obj": [2, 4, 14, 17], "replac": [2, 24], "pdf": [2, 4, 7, 8, 9, 10, 14, 17, 18, 21, 22], "where": [2, 4, 7, 8, 9, 10, 14, 17, 18, 19, 21], "dictionari": [2, 3, 4, 7, 8, 9, 10, 17], "each": [2, 3, 4, 6, 7, 8, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26], "kei": [2, 3, 4, 7, 8, 9, 10, 17], "form": [2, 4, 17, 18, 21], "model_nam": [2, 17], "slice": [2, 4, 7, 8, 9, 10, 17, 19], "test_std": [2, 4], "train_std": [2, 4], "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "pd": [2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 17, 18, 21, 27], "feature_dict": [3, 7, 8, 9, 10], "step": [3, 7, 8, 9, 10], "temp": [3, 9], "arrai": [3, 11, 15, 16, 17], "grid": [3, 17], "input": [3, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19], "electrolyt": [3, 9, 10, 12, 13, 17, 18, 21], "composit": [3, 9, 10, 12, 13, 17, 18, 21], "spars": [3, 16], "featur": [3, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27], "vector": [3, 12, 13, 15, 16, 17], "min": [3, 7, 8, 9, 10, 17, 20, 25], "max": [3, 7, 8, 9, 10, 17, 19, 20, 25], "either": [3, 7, 8, 9, 10, 17], "val0": [3, 7, 8, 9, 10], "val1": [3, 7, 8, 9, 10], "val2": [3, 7, 8, 9, 10], "temperatur": [3, 7, 9, 11, 12, 13, 17, 18, 21], "convert": 3, "invers": [3, 12, 13, 17, 18, 21], "1000": [3, 17, 18, 21], "273": [3, 18, 21], "15": [3, 18, 21, 27], "ad": [3, 7, 8, 18, 19, 21, 23], "meshgrid": 3, "span": [3, 17], "dimens": [3, 12, 13, 17, 26], "np": [3, 17, 27], "estimator_nam": [4, 17], "metric": [4, 6, 17, 18, 21], "n_plot": 4, "eta": 4, "squar": [4, 18, 21], "infinit": [4, 17], "data": [4, 5, 6, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "second": [4, 15, 23], "extract": 5, "store": [5, 12, 17], "alreadi": [5, 17, 24], "frame": 5, "contain": [5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 25], "show": [6, 7, 8, 9, 10, 17, 25, 26, 27], "mae": [6, 17, 18, 21], "r2": [6, 17, 27], "sort": 6, "alwai": 6, "rather": [6, 17], "than": [6, 7, 9, 10, 17, 26], "beta_0_list": [7, 8], "20": [7, 17], "50": [7, 8, 9, 10, 18, 21, 27], "ylim": [7, 8], "multiply_by_salt": [7, 8, 9, 10], "model_label": [7, 8], "wf_label": [7, 8], "indicate_max": 7, "along": [7, 8, 9, 10, 18, 22], "one": [7, 8, 12, 13, 17, 23, 24, 26], "directli": [7, 9, 17], "ionic": [7, 9, 12, 13, 14], "singl": [7, 9, 10, 11, 12, 13, 17, 18, 19, 21], "render": [7, 8, 9, 10], "everi": [7, 8, 19, 24], "should": [7, 8, 12, 14, 17, 18, 21], "correspond": [7, 8, 9, 10, 12, 17, 18, 21], "label": [7, 8, 14, 15, 16, 18, 21, 24, 26, 27], "beta_0": [7, 8, 9, 11, 12, 14, 17, 18, 21], "respect": [7, 8, 12], "see": [7, 8, 9, 12, 15, 16, 17, 26], "direct_sample_arrheniu": [7, 8, 9, 12], "signifi": [7, 9, 12, 13], "doesn": [7, 9], "t": [7, 9, 17, 18, 21], "back": [7, 9, 17], "transform": [7, 8, 9, 10, 12, 14, 17, 18, 21], "between": [7, 8, 9, 10, 18, 21], "multipli": [7, 8, 9, 10], "salt": [7, 8, 9, 10, 17], "content": [7, 8, 9, 10], "x_lisalt": [7, 8, 9, 10, 14, 17], "necessari": [7, 8, 9, 10], "were": [7, 8, 9, 10, 17, 18, 21], "true": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 23, 24, 26, 27], "log_": [7, 9, 12, 13, 18, 21], "abbrevi": [7, 8], "otherwis": [7, 8, 9, 10, 12, 15, 17], "verbos": [7, 8, 17, 24], "append": [7, 8, 24], "noth": [7, 8, 9, 10, 17], "note": [7, 8, 17], "scalar": [7, 8], "By": [7, 8, 17, 19, 22, 24, 27], "errorbar": [7, 8, 27], "96": [7, 8, 27], "would": [7, 8, 17], "reflect": [7, 8], "an": [7, 8, 17, 18, 19, 21, 26], "approxim": [7, 8], "95": [7, 8], "boolean": [7, 8, 9, 10, 17, 23], "indic": [7, 8, 9, 10, 14, 16, 17, 23], "scheme": [7, 8, 9, 10], "slice_1d_": 7, "varied_featur": [7, 8, 9, 10], "_multiply_by_salt_ind": 7, "plt": [7, 25, 27], "savefig": 7, "_multiply_by_salt": 7, "_indic": 7, "do": [7, 9, 10, 17], "vertic": 7, "dash": 7, "line": 7, "within": [7, 20, 25], "greater": [7, 9, 10], "global_objectve_max": 7, "top": [7, 18, 21], "20th": 7, "percentil": [7, 26], "limit": [7, 9, 10], "minimum": [7, 17, 18, 21], "down": [7, 27], "s0": [8, 10, 12, 17, 18, 21], "s1": [8, 10, 12, 17, 18, 21], "s2": [8, 10, 12, 17, 18, 21], "three": [8, 10], "coeffici": [8, 10, 17, 18, 21], "typic": [8, 10], "though": 8, "modifi": [8, 17], "s0_output": [8, 10], "s0_pred": [8, 10], "log10": [8, 10], "slice_1d_sx_": 8, "restrict": [9, 10], "x_ec": [9, 10], "x_emc": [9, 10], "focu": [9, 10], "kwarg": [9, 10, 15, 16, 17], "two": [9, 10, 17], "same": [9, 10, 17], "thei": [9, 17], "sum": [9, 10], "exclud": [9, 10, 14, 17, 18, 21, 25], "imposs": [9, 10], "row": [9, 10, 17, 18, 19, 21, 24], "column": [9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 26, 27], "black": [9, 10, 14, 27], "circl": [9, 10], "2d": [9, 10, 20, 25], "slice_2d_": 9, "keyword": [9, 10], "pyplot": [9, 10, 25, 27], "countourf": [9, 10], "slice_2d_sx_": 10, "x": [11, 12, 13, 15, 16, 17, 18, 21, 25, 27], "uarrai": 11, "seri": [11, 27], "x_in": [12, 13], "match": [12, 13, 17], "format": [12, 13, 14, 17, 24], "drawn": 12, "posit": [12, 16], "have": [12, 17, 18, 19, 21], "been": 12, "dure": [12, 17], "structur": [12, 13], "sigma": [12, 13, 17, 18, 21, 27], "x_i": [12, 13], "here": [12, 13], "x_1": [12, 13], "x_2": [12, 13], "conducivity_std": [12, 13], "x_arrheniu": 14, "true_x_df": 14, "plot_std": 14, "true_object": 14, "color": 14, "y_label": 14, "individual_data_df": 14, "save_idx": 14, "titl": 14, "relev": [14, 17], "addit": [14, 17, 18, 19, 21], "assign": [14, 17], "experiment": [14, 18, 19, 20, 21, 22, 23, 25, 26], "true_x": 14, "individual_data": 14, "individu": [14, 17, 21], "arrhenius_fit_": 14, "class": [15, 16, 17], "infer_alpha": [15, 17], "min_alpha": 15, "alpha": [15, 17, 27], "1e": 15, "fmin_l_bfgs_b": 15, "n_restarts_optim": [15, 17, 27], "normalize_i": 15, "copy_x_train": 15, "gaussianprocessregressor": 15, "take": [15, 16, 17, 19, 23, 26, 27], "ident": [15, 17, 18, 19, 21], "__init__": [15, 16, 17], "constructor": [15, 16], "doc": [15, 16, 17], "except": 15, "requir": [15, 26], "like": [15, 16], "shape": [15, 16, 17], "n_sampl": [15, 16, 27], "n_featur": [15, 16], "fit_intercept": 16, "copy_x": 16, "n_job": [16, 17], "linearregress": 16, "accept": [16, 17], "specifi": [16, 17], "polynomialfeatur": [16, 17], "sample_weight": 16, "onli": [16, 17, 18, 19, 21, 22, 26], "initi": [16, 17, 25], "those": 16, "n_object": 16, "weight": 16, "matrix": 16, "objective_list": 17, "polynomial_degre": [17, 27], "validation_holdout": [17, 27], "composition_featur": 17, "fundament": 17, "track": 17, "via": 17, "bootstrap": 17, "full": 17, "enumer": 17, "must": 17, "target": 17, "task": 17, "ani": 17, "stochast": 17, "maximum": 17, "degre": 17, "sklearn": [17, 22], "preprocess": 17, "hold": 17, "out": 17, "holdout": 17, "while": 17, "total": [17, 26], "reserv": 17, "character": 17, "uniqu": [17, 18, 19, 21], "group": [17, 18], "purpos": 17, "For": [17, 18, 21], "exampl": [17, 25], "solvent": 17, "concentr": 17, "exempt": 17, "compon": 17, "we": [17, 19, 26], "avoid": 17, "overfit": 17, "includ": [17, 18, 21, 25, 27], "slightli": 17, "supported_model": 17, "regr_nam": 17, "add_regr": [17, 27], "reg": 17, "poly_lr": 17, "lasso": 17, "lin": 17, "lasso_lr": 17, "ridg": 17, "ridge_lr": 17, "iso": 17, "gpr_rbf_iso": 17, "aniso": 17, "gpr_rbf_aniso": 17, "gpr_matern_iso": 17, "gpr_matern_aniso": 17, "ration": 17, "quadrat": 17, "gpr_rq_iso": 17, "gpr_custom": 17, "supported_metr": 17, "current": 17, "instanc": 17, "rescal": 17, "normal": [17, 18, 21, 27], "distribut": [17, 20, 25], "standardscal": 17, "poly_x": 17, "mix": 17, "built": 17, "up": 17, "x_unscal": 17, "raw": 17, "analog": 17, "attribut": 17, "unscal": 17, "x_valid": 17, "asid": 17, "ml": 17, "y_valid": 17, "std": [17, 18], "std_valid": 17, "breviti": 17, "_std": 17, "_valid": 17, "main": 17, "withheld": 17, "_random_st": 17, "call": [17, 18, 21, 25], "_n_job": 17, "parallel": 17, "core": 17, "avail": 17, "uncertainty_fn": 17, "callabl": [17, 23], "pool": [17, 27], "batch_siz": [17, 27], "target_uncertainti": 17, "recommend": 17, "queri": [17, 27], "adapt": 17, "modal": 17, "blob": 17, "7f72997b6dc26e8fe063b90d409c7cfcf4ef418": 17, "py": 17, "propos": 17, "www": 17, "sciencedirect": 17, "articl": 17, "pii": 17, "s0020025516313949": 17, "highest": 17, "case": 17, "candid": 17, "generate_bin": 17, "lower": 17, "bound": 17, "consid": [17, 26], "well": [17, 18, 21], "lowest": [17, 18, 21], "prioriti": 17, "further": 17, "fit_nam": 17, "add": 17, "descript": [17, 25], "below": [17, 18, 21], "info": 17, "specif": 17, "exist": [17, 24], "overwritten": 17, "creation": 17, "load": [17, 24], "direct": 17, "construct": 17, "whitekernel": 17, "extend": [17, 24], "clase": 17, "alphagpr": 17, "essenti": 17, "y_std": [17, 27], "repres": 17, "bias": 17, "white": 17, "its": 17, "own": 17, "polynomialregress": 17, "allow": 17, "integ": 17, "less": 17, "equal": 17, "autofil": 17, "arrhenius_cross_valid": 17, "original_object": 17, "df": [17, 20, 25, 27], "arrhenius_object": 17, "show_titl": 17, "deviate_by_salt": 17, "custom_label": 17, "highlight_extrema": 17, "after": 17, "origin": 17, "cv": [17, 27], "fold": 17, "pre": 17, "more": 17, "order": 17, "best": [17, 27], "desir": [17, 18, 21, 22, 27], "filenam": [17, 18, 21, 22], "convent": [17, 18, 21, 22], "logarithm": 17, "sem": 17, "r2_train": 17, "r2_train_sem": 17, "mae_train": 17, "mae_train_sem": 17, "mse_train": 17, "mse_train_sem": 17, "rmse_train": 17, "rmse_train_sem": 17, "r2_test": 17, "r2_test_sem": 17, "mae_test": 17, "mae_test_sem": 17, "mse_test": 17, "mse_test_sem": 17, "rmse_test": 17, "rmse_test_sem": 17, "arrhenius_valid": 17, "accuraci": 17, "automl": 17, "k_fold": 17, "baselin": 17, "chosen": [17, 18, 21], "dataset_s": 17, "500": [17, 27], "irbf": 17, "imatern": 17, "read": [17, 18, 21, 24], "addition": 17, "arbf": 17, "amatern": 17, "wa": 17, "objective_std": 17, "_alpha": 17, "aforement": 17, "elif": 17, "abov": 17, "pr": 17, "nth": 17, "5000": 17, "mlpregressor": 17, "lbfg": 17, "solver": 17, "els": [17, 25], "isn": 17, "moot": 17, "best_model": 17, "objective_nam": 17, "cross_valid": 17, "k": [17, 18, 21], "togeth": 17, "prevent": 17, "leakag": 17, "toggl": [17, 24], "instead": [17, 24], "them": [17, 24], "databas": 17, "estimate_uncertainti": 17, "enabl": 17, "200": 17, "30": 17, "mapieregressor": 17, "jackknif": 17, "detail": 17, "ab": 17, "fixed_valu": 17, "min_bin": 17, "feature_importance_bin": 17, "manual_bin": 17, "manual_min_max_bound": 17, "validity_test": 17, "discret": 17, "design": 17, "higher": [17, 26], "import": [17, 22, 24, 25, 26], "bin": 17, "determin": 17, "altern": 17, "formula": 17, "_count": 17, "importance_": 17, "objective_1": 17, "_import": 17, "_bin": 17, "could": 17, "explicitli": 17, "f": [17, 27], "feature_list": [17, 18, 21, 26], "get_estim": 17, "baseestim": 17, "get": 17, "associ": 17, "singular": 17, "hyperparameter_optim": 17, "opt_param": 17, "autom": 17, "encapsul": 17, "explor": 17, "architectur": 17, "min_samples_split": 17, "min_samples_leaf": 17, "max_depth": 17, "31": 17, "n_estim": 17, "2200": 17, "300": 17, "max_featur": 17, "hidden_layer_1": 17, "hidden_layer_2": 17, "hidden_layer_3": 17, "hidden_layer_4": 17, "0001": 17, "01": 17, "sgd": 17, "adam": 17, "logist": 17, "tanh": 17, "relu": 17, "max_it": 17, "5001": 17, "defini": 17, "recurs": 17, "elimin": 17, "done": 17, "extrapol": 17, "trend": 17, "n_training_data": 17, "n_inf": 17, "algorithm": [17, 26], "again": 17, "stop": 17, "condit": 17, "exce": 17, "increas": 17, "reduc": 17, "similar": 17, "previou": 17, "work": 17, "lassocv": 17, "later": 17, "anoth": 17, "overwrit": [17, 24], "signatur": 17, "scorer": 17, "mean_cv_scor": 17, "entri": [17, 19], "also": [17, 18, 19, 21, 26], "val": 17, "print": 17, "time_sem": 17, "_sem": 17, "sqrt": [17, 27], "n_": 17, "strategi": 17, "obj_fn": 17, "search": [17, 18, 21], "expect": [17, 18, 21], "improv": [17, 27], "upper": 17, "ei": [17, 27], "ucb": 17, "lcb": 17, "max_uncert": [17, 27], "2x1": 17, "acquisit": 17, "computation": 17, "expens": 17, "chanc": 17, "find": 17, "global": 17, "poly_lr_coef": 17, "wherea": 17, "ddof": 17, "poli": 17, "coef": 17, "rel": [17, 18, 21, 24], "feature_1": 17, "feature_2": 17, "feature_n": 17, "deg": 17, "power": 17, "polynomial_convert": 17, "x_scale": [17, 27], "min_max": [17, 27], "return_std": [17, 27], "fn": 17, "b": 17, "conform": 17, "outlin": 17, "yet": 17, "name_std": 17, "reinit_data_set": 17, "reset": 17, "shuffl": 17, "validation_holdhout": 17, "percentag": 17, "remove_regr": 17, "remov": [17, 23, 26], "delet": 17, "retrain": 17, "inverse_temp": [18, 21], "min_sampl": [18, 21], "n_fit": [18, 21], "rightarrow": [18, 21], "s_0": [18, 21], "s_1": [18, 21], "s_2": [18, 21], "conductivity_std": 18, "some": [18, 21], "arbitrari": [18, 21], "make": [18, 25], "implicit": 18, "averag": [18, 21, 27], "perturb": [18, 21], "cdot": 18, "_normal": 18, "qualiti": [18, 21], "beta": [18, 21], "freeli": [18, 21], "correl": [18, 21, 22], "s_": [18, 21], "s0_std": [18, 21], "absolut": [18, 21], "arrh": [18, 21], "100c": [18, 21], "displai": [18, 21, 25], "histogram": [18, 21], "disambigu": [18, 21], "untion": [18, 21], "properli": [18, 21, 24], "prepar": [18, 21], "befor": [18, 21], "threshold": [18, 21, 26], "discard": [18, 21], "becom": [18, 21], "uncorrel": [18, 21], "50c": [18, 21], "5c": [18, 21], "vari": [18, 21], "refit": [18, 21], "onset_temp_plot": [18, 21], "s1_std": [18, 21], "s2_std": [18, 21], "max_sampl": 19, "rest": 19, "awai": 19, "count": 19, "show_ax": [20, 25], "3d": [20, 25], "ax": [20, 25, 27], "max_error": 21, "sever": 21, "fig_siz": 22, "covari": 22, "randomforestregressor": 22, "corr": 22, "cov": 22, "col": 23, "func": 23, "caught": 23, "clean": [23, 27], "json_directori": 24, "path_to_csv": 24, "json_import": 24, "pull": 24, "It": 24, "path": 24, "choos": [24, 26], "among": 24, "read_csv": 24, "ignor": 24, "folder": 24, "about": 24, "cannot": 24, "pars": 24, "fail": 24, "trace": 24, "issu": 24, "fig": [25, 27], "highlight_data": 25, "special": 25, "integr": 25, "highlight": 25, "red": 25, "triangl": 25, "ipywidget": [25, 27], "ipython": [25, 27], "sliced_df": 25, "cut_df": 25, "cutoff_df": 25, "figsiz": [25, 27], "add_subplot": [25, 27], "x_slider": 25, "dropdown": 25, "y_slider": 25, "z_slider": 25, "z": 25, "updat": 25, "def": [25, 27], "data_vi": 25, "chang": 25, "clear": 25, "x_featur": 25, "y_featur": 25, "z_featur": 25, "button": 25, "btn": 25, "on_click": 25, "cluster_dimens": 26, "filter_threshhold": 26, "98": 26, "quantile_filt": 26, "min_cluster_s": 26, "show_plot": 26, "detect": 26, "outlier_scor": 26, "most": 26, "actual": 26, "you": 26, "just": 26, "want": 26, "kept": 26, "v": [26, 27], "help": 26, "tune": 26, "keep": 26, "document": 26, "objective_funct": [26, 27], "analyz": 27, "math": 27, "oper": 27, "mostli": 27, "magic": 27, "inlin": 27, "graphic": 27, "interact_manu": 27, "itertool": 27, "unumpi": 27, "ufloat": 27, "importlib": 27, "reload": 27, "underli": 27, "our": 27, "toi": 27, "ravel": 27, "exp": 27, "run_experi": 27, "n_resampl": 27, "_": 27, "noisy_i": 27, "single_sampl": 27, "concat": 27, "reset_index": 27, "drop": 27, "training_data_s": 27, "starting_data": 27, "linspac": 27, "combine_cut": 27, "combined_df": 27, "111": 27, "ground": 27, "truth": 27, "fmt": 27, "capsiz": 27, "yerr": 27, "y_std_mean": 27, "xerr": 27, "o": 27, "set_ylabel": 27, "fontsiz": 27, "18": 27, "set_xlabel": 27, "tick_param": 27, "labels": 27, "16": 27, "legend": 27, "tight_layout": 27, "45": 27, "small": 27, "n_data": 27, "lt": 27, "exclus": 27, "39": 27, "gt": 27, "imatern_alpha": 27, "1218300770445662": 27, "5670326395256643": 27, "query_ei": 27, "query_qbc": 27, "committe": 27, "uncert": 27, "x_input": 27, "pred": 27, "rbmal_queri": 27, "scatter": 27, "qbc": 27, "marker": 27, "60": 27, "loc": 27, "purpl": 27, "046752": 27, "854403": 27, "114471": 27, "035587": 27, "262329": 27, "074863": 27}, "objects": {"LECA.analyze": [[2, 0, 1, "", "comparative_datasize_performance"], [3, 0, 1, "", "create_input"], [4, 0, 1, "", "datasize_performance"], [5, 0, 1, "", "extract_results"], [6, 0, 1, "", "performance_plot"], [7, 0, 1, "", "plot_1D"], [8, 0, 1, "", "plot_1D_Sx"], [9, 0, 1, "", "plot_2D"], [10, 0, 1, "", "plot_2D_Sx"], [11, 0, 1, "", "predict_arrhenius_fit"], [12, 0, 1, "", "predict_conductivity_from_arrhenius_objectives"], [13, 0, 1, "", "predict_conductivity_from_log_conductivity_objective"], [14, 0, 1, "", "visualize_arrhenius_fit"]], "LECA.estimators": [[15, 1, 1, "", "AlphaGPR"], [16, 1, 1, "", "PolynomialRegression"]], "LECA.estimators.AlphaGPR": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "fit"]], "LECA.estimators.PolynomialRegression": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "predict"]], "LECA.fit": [[17, 1, 1, "", "WorkFlow"]], "LECA.fit.WorkFlow": [[17, 2, 1, "", "RBMAL"], [17, 3, 1, "", "X"], [17, 3, 1, "", "X_unscaled"], [17, 3, 1, "", "X_validate"], [17, 2, 1, "", "__init__"], [17, 3, 1, "", "_n_jobs"], [17, 3, 1, "", "_random_state"], [17, 2, 1, "", "add_regr"], [17, 2, 1, "", "arrhenius_cross_validate"], [17, 2, 1, "", "arrhenius_validate"], [17, 2, 1, "", "autoML"], [17, 2, 1, "", "best_model"], [17, 2, 1, "", "cross_validate"], [17, 2, 1, "", "estimate_uncertainty"], [17, 3, 1, "", "features"], [17, 2, 1, "", "generate_bins"], [17, 2, 1, "", "get_estimator"], [17, 2, 1, "", "hyperparameter_optimize"], [17, 2, 1, "", "mean_cv_scores"], [17, 3, 1, "", "objective_list"], [17, 2, 1, "", "optimize"], [17, 3, 1, "", "poly_X"], [17, 2, 1, "", "poly_lr_coefs"], [17, 2, 1, "", "polynomial_convert"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "reinit_data_sets"], [17, 2, 1, "", "remove_regr"], [17, 3, 1, "", "results"], [17, 2, 1, "", "retrain"], [17, 3, 1, "", "supported_metrics"], [17, 3, 1, "", "supported_models"], [17, 2, 1, "", "validate"]], "LECA.prep": [[18, 0, 1, "", "arrhenius"], [19, 0, 1, "", "combine_cut"], [20, 0, 1, "", "data_visualize"], [21, 0, 1, "", "direct_sample_arrhenius"], [22, 0, 1, "", "feature_overview"], [23, 0, 1, "", "filter_fn"], [24, 0, 1, "", "import_data"], [25, 0, 1, "", "interactive_data_visualize"], [26, 0, 1, "", "outlier_filter"]]}, "objtypes": {"0": "py:function", "1": "py:class", "2": "py:method", "3": "py:attribute"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"leca": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "The": 0, "liquid": 0, "electrolyt": 0, "composit": 0, "analysi": [0, 1], "packag": 0, "requir": 0, "instal": 0, "envisag": 0, "work": 0, "flow": 0, "data": [0, 1], "import": [0, 27], "featur": 0, "engin": 0, "initi": [0, 27], "regress": [0, 1], "model": [0, 1], "compar": 0, "result": 0, "analyz": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "object": 0, "function": 0, "area": 0, "further": 0, "develop": 0, "refer": 0, "acknowledg": 0, "link": 0, "api": 1, "prepar": 1, "workflow": [1, 17, 27], "custom": 1, "estim": [1, 15, 16], "notebook": 1, "util": 1, "comparative_datasize_perform": 2, "create_input": 3, "datasize_perform": 4, "extract_result": 5, "performance_plot": 6, "plot_1d": 7, "plot_1d_sx": 8, "plot_2d": 9, "plot_2d_sx": 10, "predict_arrhenius_fit": 11, "predict_conductivity_from_arrhenius_object": 12, "predict_conductivity_from_log_conductivity_object": 13, "visualize_arrhenius_fit": 14, "alphagpr": 15, "polynomialregress": 16, "fit": 17, "prep": [18, 19, 20, 21, 22, 23, 24, 25, 26], "arrheniu": 18, "combine_cut": 19, "data_visu": 20, "direct_sample_arrheniu": 21, "feature_overview": 22, "filter_fn": 23, "import_data": 24, "interactive_data_visu": 25, "outlier_filt": 26, "synthet": 27, "1d": 27, "introduct": 27, "standard": 27, "python": 27, "modul": 27, "interact": 27, "widget": 27, "plot": 27, "displai": 27, "defin": 27, "experiment": 27, "setup": 27, "datafram": 27, "measur": 27, "start": 27, "run": 27, "automl": 27, "us": 27, "activelearn": 27, "find": 27, "expect": 27, "point": 27, "interest": 27}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"LECA - The Liquid Electrolyte Composition Analysis Package": [[0, "leca-the-liquid-electrolyte-composition-analysis-package"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Envisaged LECA Work Flow": [[0, "envisaged-leca-work-flow"]], "Data Import and Feature Engineering": [[0, "data-import-and-feature-engineering"]], "Initialize Regression Models and Compare Results": [[0, "initialize-regression-models-and-compare-results"]], "Analyze Objective Function for Compositions": [[0, "analyze-objective-function-for-compositions"]], "Areas of Further Development": [[0, "areas-of-further-development"]], "References": [[0, "references"]], "Acknowledgments": [[0, "acknowledgments"]], "Links": [[0, "links"]], "LECA API": [[1, "leca-api"]], "Data Preparation": [[1, "data-preparation"]], "Regression WorkFlow": [[1, "regression-workflow"]], "Model Analysis": [[1, "model-analysis"]], "LECA Custom Estimators": [[1, "leca-custom-estimators"]], "Notebook Utils": [[1, "notebook-utils"]], "LECA.analyze.comparative_datasize_performance": [[2, "leca-analyze-comparative-datasize-performance"]], "LECA.analyze.create_input": [[3, "leca-analyze-create-input"]], "LECA.analyze.datasize_performance": [[4, "leca-analyze-datasize-performance"]], "LECA.analyze.extract_results": [[5, "leca-analyze-extract-results"]], "LECA.analyze.performance_plot": [[6, "leca-analyze-performance-plot"]], "LECA.analyze.plot_1D": [[7, "leca-analyze-plot-1d"]], "LECA.analyze.plot_1D_Sx": [[8, "leca-analyze-plot-1d-sx"]], "LECA.analyze.plot_2D": [[9, "leca-analyze-plot-2d"]], "LECA.analyze.plot_2D_Sx": [[10, "leca-analyze-plot-2d-sx"]], "LECA.analyze.predict_arrhenius_fit": [[11, "leca-analyze-predict-arrhenius-fit"]], "LECA.analyze.predict_conductivity_from_arrhenius_objectives": [[12, "leca-analyze-predict-conductivity-from-arrhenius-objectives"]], "LECA.analyze.predict_conductivity_from_log_conductivity_objective": [[13, "leca-analyze-predict-conductivity-from-log-conductivity-objective"]], "LECA.analyze.visualize_arrhenius_fit": [[14, "leca-analyze-visualize-arrhenius-fit"]], "LECA.estimators.AlphaGPR": [[15, "leca-estimators-alphagpr"]], "LECA.estimators.PolynomialRegression": [[16, "leca-estimators-polynomialregression"]], "LECA.fit.WorkFlow": [[17, "leca-fit-workflow"]], "LECA.prep.arrhenius": [[18, "leca-prep-arrhenius"]], "LECA.prep.combine_cut": [[19, "leca-prep-combine-cut"]], "LECA.prep.data_visualize": [[20, "leca-prep-data-visualize"]], "LECA.prep.direct_sample_arrhenius": [[21, "leca-prep-direct-sample-arrhenius"]], "LECA.prep.feature_overview": [[22, "leca-prep-feature-overview"]], "LECA.prep.filter_fn": [[23, "leca-prep-filter-fn"]], "LECA.prep.import_data": [[24, "leca-prep-import-data"]], "LECA.prep.interactive_data_visualize": [[25, "leca-prep-interactive-data-visualize"]], "LECA.prep.outlier_filter": [[26, "leca-prep-outlier-filter"]], "Synthetic 1D LECA Introduction": [[27, "Synthetic-1D-LECA-Introduction"]], "Import LECA & Standard Python Modules": [[27, "Import-LECA-&-Standard-Python-Modules"]], "Import Interactive widgets, plots and display": [[27, "Import-Interactive-widgets,-plots-and-display"]], "Define Synthetic experimental setup": [[27, "Define-Synthetic-experimental-setup"]], "Initialize DataFrame of experimental measurements": [[27, "Initialize-DataFrame-of-experimental-measurements"]], "Start workflow and run autoML": [[27, "Start-workflow-and-run-autoML"]], "Use activeLearn to find expected points of interest": [[27, "Use-activeLearn-to-find-expected-points-of-interest"]]}, "indexentries": {"comparative_datasize_performance() (in module leca.analyze)": [[2, "LECA.analyze.comparative_datasize_performance"]], "create_input() (in module leca.analyze)": [[3, "LECA.analyze.create_input"]], "datasize_performance() (in module leca.analyze)": [[4, "LECA.analyze.datasize_performance"]], "extract_results() (in module leca.analyze)": [[5, "LECA.analyze.extract_results"]], "performance_plot() (in module leca.analyze)": [[6, "LECA.analyze.performance_plot"]], "plot_1d() (in module leca.analyze)": [[7, "LECA.analyze.plot_1D"]], "plot_1d_sx() (in module leca.analyze)": [[8, "LECA.analyze.plot_1D_Sx"]], "plot_2d() (in module leca.analyze)": [[9, "LECA.analyze.plot_2D"]], "plot_2d_sx() (in module leca.analyze)": [[10, "LECA.analyze.plot_2D_Sx"]], "predict_arrhenius_fit() (in module leca.analyze)": [[11, "LECA.analyze.predict_arrhenius_fit"]], "predict_conductivity_from_arrhenius_objectives() (in module leca.analyze)": [[12, "LECA.analyze.predict_conductivity_from_arrhenius_objectives"]], "predict_conductivity_from_log_conductivity_objective() (in module leca.analyze)": [[13, "LECA.analyze.predict_conductivity_from_log_conductivity_objective"]], "visualize_arrhenius_fit() (in module leca.analyze)": [[14, "LECA.analyze.visualize_arrhenius_fit"]], "alphagpr (class in leca.estimators)": [[15, "LECA.estimators.AlphaGPR"]], "__init__() (leca.estimators.alphagpr method)": [[15, "LECA.estimators.AlphaGPR.__init__"]], "fit() (leca.estimators.alphagpr method)": [[15, "LECA.estimators.AlphaGPR.fit"]], "polynomialregression (class in leca.estimators)": [[16, "LECA.estimators.PolynomialRegression"]], "__init__() (leca.estimators.polynomialregression method)": [[16, "LECA.estimators.PolynomialRegression.__init__"]], "fit() (leca.estimators.polynomialregression method)": [[16, "LECA.estimators.PolynomialRegression.fit"]], "predict() (leca.estimators.polynomialregression method)": [[16, "LECA.estimators.PolynomialRegression.predict"]], "rbmal() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.RBMAL"]], "workflow (class in leca.fit)": [[17, "LECA.fit.WorkFlow"]], "x (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.X"]], "x_unscaled (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.X_unscaled"]], "x_validate (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.X_validate"]], "__init__() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.__init__"]], "_n_jobs (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow._n_jobs"]], "_random_state (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow._random_state"]], "add_regr() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.add_regr"]], "arrhenius_cross_validate() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.arrhenius_cross_validate"]], "arrhenius_validate() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.arrhenius_validate"]], "automl() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.autoML"]], "best_model() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.best_model"]], "cross_validate() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.cross_validate"]], "estimate_uncertainty() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.estimate_uncertainty"]], "features (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.features"]], "generate_bins() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.generate_bins"]], "get_estimator() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.get_estimator"]], "hyperparameter_optimize() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.hyperparameter_optimize"]], "mean_cv_scores() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.mean_cv_scores"]], "objective_list (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.objective_list"]], "optimize() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.optimize"]], "poly_x (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.poly_X"]], "poly_lr_coefs() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.poly_lr_coefs"]], "polynomial_convert() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.polynomial_convert"]], "predict() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.predict"]], "reinit_data_sets() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.reinit_data_sets"]], "remove_regr() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.remove_regr"]], "results (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.results"]], "retrain() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.retrain"]], "supported_metrics (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.supported_metrics"]], "supported_models (leca.fit.workflow attribute)": [[17, "LECA.fit.WorkFlow.supported_models"]], "validate() (leca.fit.workflow method)": [[17, "LECA.fit.WorkFlow.validate"]], "arrhenius() (in module leca.prep)": [[18, "LECA.prep.arrhenius"]], "combine_cut() (in module leca.prep)": [[19, "LECA.prep.combine_cut"]], "data_visualize() (in module leca.prep)": [[20, "LECA.prep.data_visualize"]], "direct_sample_arrhenius() (in module leca.prep)": [[21, "LECA.prep.direct_sample_arrhenius"]], "feature_overview() (in module leca.prep)": [[22, "LECA.prep.feature_overview"]], "filter_fn() (in module leca.prep)": [[23, "LECA.prep.filter_fn"]], "import_data() (in module leca.prep)": [[24, "LECA.prep.import_data"]], "interactive_data_visualize() (in module leca.prep)": [[25, "LECA.prep.interactive_data_visualize"]], "outlier_filter() (in module leca.prep)": [[26, "LECA.prep.outlier_filter"]]}})